<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test</name>
    </assembly>
    <members>
        <member name="M:Test.Controllers.customerController.UpdateScore(System.Int64,System.Decimal)">
            <summary>
            Add or modify user scores
            </summary>
            <param name="customerid"></param>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="T:Test.Controllers.leaderboardController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Test.Controllers.leaderboardController.#ctor(Microsoft.Extensions.Logging.ILogger{Test.Controllers.leaderboardController})">
            <summary>
            
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Test.Controllers.leaderboardController.GetLeaderboard(System.Int32,System.Int32)">
            <summary>
            Obtain the leaderboard based on rankings
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Test.Controllers.leaderboardController.GetLeaderboardByCustomId(System.Int64,System.Int32,System.Int32)">
            <summary>
            Based on the customer ID, retrieve the top or bottom few entries from the ranking list
            </summary>
            <param name="customerid"></param>
            <param name="high"></param>
            <param name="low"></param>
            <returns></returns>
        </member>
        <member name="T:Test.Controllers.weatherForecastController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Test.Controllers.weatherForecastController.#ctor(Microsoft.Extensions.Logging.ILogger{Test.Controllers.weatherForecastController})">
            <summary>
            
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Test.Controllers.weatherForecastController.Get">
            <summary>
            delete the leaderboard
            </summary>
        </member>
        <member name="T:Test.CustomException.AppFriendlyException">
            <summary>
            自定义异常类
            </summary>
        </member>
        <member name="M:Test.CustomException.AppFriendlyException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Test.CustomException.AppFriendlyException.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="errorCode"></param>
        </member>
        <member name="M:Test.CustomException.AppFriendlyException.#ctor(System.String,System.Object,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="errorCode"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Test.CustomException.AppFriendlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Test.CustomException.AppFriendlyException.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Test.CustomException.AppFriendlyException.ErrorMessage">
            <summary>
            错误消息（支持 Object 对象）
            </summary>
        </member>
        <member name="P:Test.CustomException.AppFriendlyException.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Test.CustomException.AppFriendlyException.ValidationException">
            <summary>
            是否是数据验证异常
            </summary>
        </member>
        <member name="T:Test.Program">
            <summary>
            
            </summary>
        </member>
        <member name="M:Test.Program.Main(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Test.Program.CreateHostBuilder(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Test.Redis.RedisBase">
            <summary>
            RedisBase类，是redis操作的基类，继承自IDisposable接口，主要用于释放内存
            </summary>
        </member>
        <member name="M:Test.Redis.RedisBase.#ctor">
            <summary>
            构造时完成链接的打开
            </summary>
        </member>
        <member name="M:Test.Redis.RedisBase.FlushAll">
            <summary>
            清除全部数据 请小心
            </summary>
        </member>
        <member name="M:Test.Redis.RedisBase.Save">
            <summary>
            保存数据DB文件到硬盘
            </summary>
        </member>
        <member name="M:Test.Redis.RedisBase.SaveAsync">
            <summary>
            异步保存数据DB文件到硬盘
            </summary>
        </member>
        <member name="T:Test.Redis.RedisManager">
            <summary>
            Redis管理中心 创建Redis链接
            </summary>
        </member>
        <member name="F:Test.Redis.RedisManager.prcManager">
            <summary>
            Redis客户端池化管理
            </summary>
        </member>
        <member name="M:Test.Redis.RedisManager.#cctor">
            <summary>
            静态构造方法，初始化链接池管理对象
            </summary>
        </member>
        <member name="M:Test.Redis.RedisManager.CreateManager">
            <summary>
            创建链接池管理对象
            </summary>
        </member>
        <member name="M:Test.Redis.RedisManager.GetClient">
            <summary>
            客户端缓存操作对象
            </summary>
        </member>
        <member name="T:Test.Redis.RedisZSetService">
            <summary>
            Sorted Sets是将 Set 中的元素增加了一个权重参数 score，使得集合中的元素能够按 score 进行有序排列
            1.带有权重的元素，比如一个游戏的用户得分排行榜
            2.比较复杂的数据结构，一般用到的场景不算太多
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.Add(System.String,System.String)">
            <summary>
            添加key/value，默认分数是从1.多*10的9次方以此递增的,自带自增效果
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.AddItemToSortedSet(System.String,System.String,System.Double)">
            <summary>
            添加key/value,并设置value的分数
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.AddRangeToSortedSet(System.String,System.Collections.Generic.List{System.String},System.Double)">
            <summary>
            为key添加values集合，values集合中每个value的分数设置为score
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.AddRangeToSortedSet(System.String,System.Collections.Generic.List{System.String},System.Int64)">
            <summary>
            为key添加values集合，values集合中每个value的分数设置为score
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.GetAll(System.String)">
            <summary>
            获取key的所有集合
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.GetAllDesc(System.String)">
            <summary>
            获取key的所有集合，倒叙输出
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.GetAllWithScoresFromSortedSet(System.String)">
            <summary>
            获取集合，带分数
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.GetItemIndexInSortedSet(System.String,System.String)">
            <summary>
            获取key为value的下标值
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.GetItemIndexInSortedSetDesc(System.String,System.String)">
            <summary>
            倒叙排列获取key为value的下标值
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.GetItemScoreInSortedSet(System.String,System.String)">
            <summary>
            获取key为value的分数
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.GetSortedSetCount(System.String)">
            <summary>
            获取key所有集合的数据总数
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.GetSortedSetCount(System.String,System.Double,System.Double)">
            <summary>
            key集合数据从分数为fromscore到分数为toscore的数据总数
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.GetRangeFromSortedSetByHighestScore(System.String,System.Double,System.Double)">
            <summary>
            获取key集合从高分到低分排序数据，分数从fromscore到分数为toscore的数据
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.GetRangeFromSortedSetByLowestScore(System.String,System.Double,System.Double)">
            <summary>
            获取key集合从低分到高分排序数据，分数从fromscore到分数为toscore的数据
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.GetRangeWithScoresFromSortedSetByHighestScore(System.String,System.Double,System.Double)">
            <summary>
            获取key集合从高分到低分排序数据，分数从fromscore到分数为toscore的数据，带分数
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.GetRangeWithScoresFromSortedSetByLowestScore(System.String,System.Double,System.Double)">
            <summary>
             获取key集合从低分到高分排序数据，分数从fromscore到分数为toscore的数据，带分数
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.GetRangeFromSortedSet(System.String,System.Int32,System.Int32)">
            <summary>
             获取key集合数据，下标从fromRank到分数为toRank的数据
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.GetRangeFromSortedSetDesc(System.String,System.Int32,System.Int32)">
            <summary>
            获取key集合倒叙排列数据，下标从fromRank到分数为toRank的数据
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.GetRangeWithScoresFromSortedSet(System.String,System.Int32,System.Int32)">
            <summary>
            获取key集合数据，下标从fromRank到分数为toRank的数据，带分数
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.GetRangeWithScoresFromSortedSetDesc(System.String,System.Int32,System.Int32)">
            <summary>
             获取key集合倒叙排列数据，下标从fromRank到分数为toRank的数据，带分数
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.RemoveItemFromSortedSet(System.String,System.String)">
            <summary>
            删除key为value的数据
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.RemoveRangeFromSortedSet(System.String,System.Int32,System.Int32)">
            <summary>
            删除下标从minRank到maxRank的key集合数据
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.RemoveRangeFromSortedSetByScore(System.String,System.Double,System.Double)">
            <summary>
            删除分数从fromscore到toscore的key集合数据
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.PopItemWithHighestScoreFromSortedSet(System.String)">
            <summary>
            删除key集合中分数最大的数据
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.PopItemWithLowestScoreFromSortedSet(System.String)">
            <summary>
            删除key集合中分数最小的数据
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.SortedSetContainsItem(System.String,System.String)">
            <summary>
            判断key集合中是否存在value数据
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.IncrementItemInSortedSet(System.String,System.String,System.Double)">
            <summary>
            为key集合值为value的数据，分数加scoreby，返回相加后的分数
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.StoreIntersectFromSortedSets(System.String,System.String[])">
            <summary>
            获取keys多个集合的交集，并把交集添加的newkey集合中，返回交集数据的总数
            </summary>
        </member>
        <member name="M:Test.Redis.RedisZSetService.StoreUnionFromSortedSets(System.String,System.String[])">
            <summary>
            获取keys多个集合的并集，并把并集数据添加到newkey集合中，返回并集数据的总数
            </summary>
        </member>
        <member name="T:Test.Startup">
            <summary>
            
            </summary>
        </member>
        <member name="M:Test.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:Test.Startup.Configuration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Test.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Test.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
    </members>
</doc>
