<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test</name>
    </assembly>
    <members>
        <member name="T:Test.Controllers.customerController">
            <summary>
            customerController
            </summary>
        </member>
        <member name="M:Test.Controllers.customerController.#ctor(Microsoft.Extensions.Logging.ILogger{Test.Controllers.customerController})">
            <summary>
            customerController
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Test.Controllers.customerController.UpdateScore(System.Nullable{System.Int64},System.Nullable{System.Decimal})">
            <summary>
            Add or modify user scores
            </summary>
            <param name="customerid"></param>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="T:Test.Controllers.leaderboardController">
            <summary>
            leaderboardController
            </summary>
        </member>
        <member name="M:Test.Controllers.leaderboardController.#ctor(Microsoft.Extensions.Logging.ILogger{Test.Controllers.leaderboardController})">
            <summary>
            
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Test.Controllers.leaderboardController.GetLeaderboardByCustomId(System.Int64,System.Int32,System.Int32)">
            <summary>
            Based on the customer ID, retrieve the top or bottom few entries from the ranking list
            </summary>
            <param name="customerid"></param>
            <param name="high"></param>
            <param name="low"></param>
            <returns></returns>
        </member>
        <member name="M:Test.Controllers.leaderboardController.GetLeaderboard(System.Int32,System.Int32)">
            <summary>
            Obtain the leaderboard based on rankings
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:Test.Controllers.testController">
            <summary>
            testController
            </summary>
        </member>
        <member name="M:Test.Controllers.testController.#ctor(Microsoft.Extensions.Logging.ILogger{Test.Controllers.testController})">
            <summary>
            
            </summary>
            <summary>
            testController
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Test.Controllers.testController.delete">
            <summary>
            delete the leaderboard
            </summary>
        </member>
        <member name="T:Test.Program">
            <summary>
            
            </summary>
        </member>
        <member name="M:Test.Program.Main(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Test.Program.CreateHostBuilder(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Test.Service.SingletonConcurrentCache">
            <summary>
            SingletonConcurrentCache
            </summary>
        </member>
        <member name="F:Test.Service.SingletonConcurrentCache.instance">
            <summary>
            instance
            </summary>
        </member>
        <member name="F:Test.Service.SingletonConcurrentCache.lockObject">
            <summary>
            lockObject
            </summary>
        </member>
        <member name="M:Test.Service.SingletonConcurrentCache.#ctor">
            <summary>
            Constructor funcation
            </summary>
        </member>
        <member name="P:Test.Service.SingletonConcurrentCache.Instance">
            <summary>
            Instance
            </summary>
        </member>
        <member name="F:Test.Service.SingletonConcurrentCache.concurrentDictionary">
            <summary>
            concurrentDictionary
            </summary>
        </member>
        <member name="M:Test.Service.SingletonConcurrentCache.AddOrUpdate(System.Int64,System.Decimal)">
            <summary>
            AddOrUpdate
            </summary>
            <param name="key"></param>
            <param name="addValue"></param>
            <returns></returns>
        </member>
        <member name="M:Test.Service.SingletonConcurrentCache.RemoveAll">
            <summary>
            RemoveAll
            </summary>
        </member>
        <member name="P:Test.Service.SingletonConcurrentCache.List">
            <summary>
            To List
            </summary>
        </member>
        <member name="T:Test.Startup">
            <summary>
            
            </summary>
        </member>
        <member name="M:Test.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:Test.Startup.Configuration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Test.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Test.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
    </members>
</doc>
